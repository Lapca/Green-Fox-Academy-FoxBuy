plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
    id 'checkstyle'
}

group = 'com.gfa'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains:annotations:24.0.0'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // not ready yet H2 integration test
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // Spring Boot Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.1.3'
    //Spring security
    implementation "org.springframework.boot:spring-boot-starter-security"
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // tests
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.springframework.security:spring-security-test:6.1.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    // Add H2 for testing
    testImplementation 'com.h2database:h2'
    // Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    //GSON
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    //Stripe
    implementation 'com.stripe:stripe-java:23.7.0'
    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run

    filter {
        includeTestsMatching "com.gfa.*"
    }

    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }

}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
checkstyle {
//    toolVersion '8.40'
////    maxWarnings = 0 // if build needs to fail
//    ignoreFailures false // if build needs to fail
    ignoreFailures true
}
//
tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}
